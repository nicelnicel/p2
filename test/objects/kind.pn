"1" isa?(String) say      #=> true
1.0 isa?(Number) say      #=> true
1.0 subclass?(Number) say #=> true

#1.0 isa?(Double) say     # => true
#d:Double = 1.0
#d isa?(Double) say       # => true
#i:Integer = 1
#i isa?(Integer) say      # => true
#i subclass?(Number) say  # => true

(10 kind == Number, # still not an Integer, only after type inference
 nil kind == NilKind,
 "mailbox" kind == String,
 10 kind == Boolean,
 nil kind == Boolean,
 "mailbox" kind == Boolean)
#=> (true, true, true, false, false, false)
